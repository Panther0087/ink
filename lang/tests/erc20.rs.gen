use pdsl_core::storage;

pdsl_model::state! {
    struct Erc20 {
        /// All peeps done by all users.
        balances: storage::HashMap<Address, Balance>,
        /// Balances that are spendable by non-owners.
        ///
        /// # Note
        ///
        /// Mapping: (from, to) -> allowed
        allowances: storage::HashMap<(Address, Address), Balance>,
        /// The total supply.
        total_supply: storage::Value<Balance>,
    }
}

pdsl_model::messages! {
    /// Returns the total number of tokens in existence.
    0 => TotalSupply() -> Balance;
    /// Returns the balance of the given address.
    1 => BalanceOf(owner: Address) -> Balance;
    /// Returns the amount of tokens that an owner allowed to a spender.
    2 => Allowance(owner: Address, spender: Address) -> Balance;
    /// Transfers token from the sender to the `to` address.
    3 => Transfer(to: Address, value: Balance) -> bool;
    /// Approve the passed address to spend the specified amount of tokens
    /// on the behalf of the message's sender.
    4 => Approve(spender: Address, value: Balance) -> bool;
    /// Transfer tokens from one address to another.
    5 => TransferFrom(from: Address, to: Address, value: Balance) -> bool;
}

impl Erc20 {
    pub fn deploy(&mut self, init_value: Balance) {
        // We have to set total supply to `0` in order to initialize it.
        // Otherwise accesses to total supply will panic.
        self.total_supply.set(0);
        self.mint_for(env.caller(), init_value);
    }
}

impl Erc20 {
    /// Returns the total number of tokens in existence.
    pub fn total_supply(&self, env: &EnvHandler) -> Balance {
        *self.total_supply
    }

    /// Returns the balance of the given address.
    pub fn balance_of(&self, env: &EnvHandler, owner: Address) -> Balance {
        *self.balances.get(&owner).unwrap_or(&0)
    }

    /// Returns the amount of tokens that an owner allowed to a spender.
    pub fn allowance(&self, env: &EnvHandler, owner: Address, spender: Address) -> Balance {
        *self.allowances.get(&(owner, spender)).unwrap_or(&0)
    }

    /// Transfers token from the sender to the `to` address.
    pub fn transfer(&mut self, env: &mut EnvHandler, to: Address, value: Balance) -> bool {
        self.transfer_impl(env.caller(), to, value);
        true
    }

    /// Approve the passed address to spend the specified amount of tokens
    /// on the behalf of the message's sender.
    pub fn approve(&mut self, env: &mut EnvHandler, spender: Address, value: Balance) -> bool {
        let owner = env.caller();
        self.allowances.insert((owner, spender), value);
        self.emit_approval(owner, spender, value);
        true
    }

    /// Transfer tokens from one address to another.
    pub fn transfer_from(&mut self, env: &mut EnvHandler, from: Address, to: Address, value: Balance) -> bool {
        self.allowances[&(from, to)] -= value;
        self.transfer_impl(from, to, value);
        let new_allowance = self.allowances[&(from, to)];
        self.emit_transfer(from, to, value);
        self.emit_approval(from, to, new_allowance);
        true
    }
}

impl Erc20 {
    /// Transfers token from a specified address to another address.
    fn transfer_impl(&mut self, from: Address, to: Address, value: Balance) {
        self.balances[&from] -= value;
        self.balances[&to] += value;
        self.emit_transfer(from, to, value);
    }

    /// Decrease balance from the address.
    ///
    /// # Panics
    ///
    /// If `from` does not have enough balance.
    fn burn_for(&mut self, from: Address, value: Balance){
        self.balances[&from] -= value;
        self.total_supply -= value;
        self.emit_transfer(from, None, value);
    }

    /// Increase balance for the receiver out of nowhere.
    fn mint_for(&mut self, receiver: Address, value: Balance) {
        self.balances[&receiver] += value;
        self.total_supply += value;
        self.emit_transfer(None, receiver, value);
    }

    /// Emits an approval event.
    fn emit_approval(
        from: Address,
        to: Address,
        value: Balance,
    ) {
        assert!(from.is_some() && to.is_some());
        assert!(value > Balance::from(0));
        // emit event - This is not yet implemented in SRML contracts.
    }

    /// Emits a transfer event.
    fn emit_transfer<F, T>(
        from: F,
        to: T,
        value: Balance,
    )
    where
        F: Into<Option<Address>>,
        T: Into<Option<Address>>,
    {
        assert!(from.is_some() || to.is_some());
        assert!(value > Balance::from(0));
        // emit event - This is not yet implemented in SRML contracts.
    }
}

fn instantiate() -> impl pdsl_model::Contract {
    pdsl_model::ContractDecl::using::<Erc20>()
        .on_deploy(|env, init_val: u32| {
            let (handler, state) = env.split_mut();
            state.deploy(handler, init_val)
        })
        .on_msg::<BalanceOf>(|env, owner| {
            let (handler, state) = env.split();
            state.balance_of(handler)
        })
        .on_msg::<Allowance>(|env, (owner, spender)| {
            let (handler, state) = env.split();
            state.allowance(handler, owner, spender)
        })
        .on_msg_mut::<Transfer>(|env, (to, value)| {
            let (handler, state) = env.split_mut();
            state.transfer(handler, to, value)
        })
        .on_msg_mut::<Approve>(|env, (spender, value)| {
            let (handler, state) = env.split_mut();
            state.approve(handler, spender, value)
        })
        .on_msg_mut::<TransferFrom>(|env, (from, to, value)| {
            let (handler, state) = env.split_mut();
            state.transfer_from(handler, from, to, value)
        })
        .instantiate()
}

#[no_mangle]
fn deploy() {
    instantiate().deploy()
}

#[no_mangle]
fn call() {
    instantiate().dispatch()
}
