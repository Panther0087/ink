use pdsl_core::storage;

pdsl_model::state! {
    /// A simple contract that has a value that can be
    /// incremented, returned and compared.
    struct Incrementer {
        /// The internal value.
        value: storage::Value<u32>
    }
}

pdsl_model::messages! {
    /// Increments the internal counter.
    0 => Inc(by: u32);
    /// Returns the internal counter.
    1 => Get() -> u32;
    /// Returns `true` if `x` is greater than the internal value.
    2 => Compare(with: u32) -> bool;
}

impl Adder {
    /// Automatically called when the contract is deployed.
    pub fn deploy(&mut self, env: &mut pdsl_model::EnvHandler, init_val: u32) {
        self.value.set(init_val)
    }
}

impl Adder {
    /// Increments the internal counter.
    pub fn inc(&mut self, env: &mut pdsl_model::EnvHandler, by: u32) {
        self.value += by
    }

    /// Returns the internal counter.
    pub fn get(&self, env: &pdsl_model::EnvHandler) -> u32 {
        *self.value
    }

    /// Returns `true` if `x` is greater than the internal value.
    pub fn compare(&self, env: &pdsl_model::EnvHandler, x: u32) -> bool {
        x > *self.value
    }
}

fn instantiate() -> impl pdsl_model::Contract {
    pdsl_model::ContractDecl::using::<Adder>()
        .on_deploy(|env, init_val: u32| {
            let (handler, state) = env.split_mut();
            state.on_deploy(handler, init_val)
        })
        .on_msg_mut::<Inc>(|env, by: u32| {
            let (handler, state) = env.split_mut();
            state.inc(handler, by)
        })
        .on_msg::<Get>(|env, _| {
            let (handler, state) = env.split();
            state.get(handler)
        })
        .on_msg::<Compare>(|env, x: u32| {
            let (handler, state) = env.split();
            state.compare(handler, x)
        })
        .instantiate()
}

#[no_mangle]
fn deploy() {
    instantiate().deploy()
}

#[no_mangle]
fn call() {
    instantiate().dispatch()
}
