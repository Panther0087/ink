use pdsl_core::storage;
use pdsl_model::{
    messages,
    state,
    Contract,
    ContractDecl,
	EnvHandler,
};

state! {
	/// A simple contract that has a value that can be
	/// incremented, returned and compared.
    struct Incrementer {
		/// The internal value.
        value: storage::Value<u32>
    }
}

messages! {
	0 => Inc(by: u32);
	1 => Get() -> u32;
	2 => Compare(with: u32) -> bool;
}

impl Adder {
	pub fn on_deploy(&mut self, env: &EnvHandler, init_val: u32) {
		self.val.set(init_val)
	}

	pub fn inc(&mut self, env: &EnvHandler, by: u32) {
		self.value += by
	}

	pub fn get(&self, env: &EnvHandler) -> u32 {
		*self.value
	}

	pub fn compare(&self, env: &EnvHandler, x: u32) -> bool {
		x > *self.value
	}
}

#[rustfmt::skip]
fn instantiate() -> impl Contract {
	ContractDecl::using::<Adder>()
		.on_deploy(|env, init_val| {
			let (handler, state) = env.split_mut();
			state.on_deploy(handler, init_val)
		})
		.on_msg_mut::<Inc>(|env, by| {
			let (handler, state) = env.split_mut();
			state.inc(handler, by)
		})
		.on_msg::<Get>(|env, _| {
			let (handler, state) = env.split();
			state.get(handler)
		})
		.on_msg::<Compare>(|env, x| {
			let (handler, state) = env.split();
			state.compare(handler, x)
		})
		.instantiate()
}

#[no_mangle]
fn deploy() {
    instantiate().deploy()
}

#[no_mangle]
fn call() {
    instantiate().dispatch()
}
